from mpl_toolkits.mplot3d import axes3d
import matplotlib.pyplot as plt
import numpy as np
from matplotlib import cm


def rob():
    results = [(-10, -10, 112.9), (-10, -8, 137.5), (-10, -6, 172.6), (-10, -4, 209.1), (-10, -2, 235.9),
               (-10, 0, 245.7), (-10, 2, 245.7), (-10, 4, 245.7), (-10, 6, 245.7), (-10, 8, 245.7), (-10, 10, 245.7),
               (-8, -10, 245.7), (-8, -8, 245.7), (-8, -6, 245.8), (-8, -4, 302.0), (-8, -2, 341.6), (-8, 0, 355.9),
               (-8, 2, 355.9), (-8, 4, 355.9), (-8, 6, 355.9), (-8, 8, 355.9), (-8, 10, 355.9), (-6, -10, 355.9),
               (-6, -8, 355.9), (-6, -6, 355.9), (-6, -4, 403.5), (-6, -2, 456.1), (-6, 0, 474.7), (-6, 2, 474.7),
               (-6, 4, 474.7), (-6, 6, 474.7), (-6, 8, 474.7), (-6, 10, 474.7), (-4, -10, 474.7), (-4, -8, 474.7),
               (-4, -6, 474.7), (-4, -4, 495.7), (-4, -2, 561.8), (-4, 0, 586.2), (-4, 2, 586.2), (-4, 4, 586.2),
               (-4, 6, 586.2), (-4, 8, 586.2), (-4, 10, 586.2), (-2, -10, 586.2), (-2, -8, 586.2), (-2, -6, 586.2),
               (-2, -4, 586.2), (-2, -2, 643.9), (-2, 0, 776.8), (-2, 2, 776.8), (-2, 4, 776.8), (-2, 6, 776.8),
               (-2, 8, 776.8), (-2, 10, 776.8), (0, -10, 776.8), (0, -8, 776.8), (0, -6, 776.8), (0, -4, 776.8),
               (0, -2, 776.8), (0, 0, 777.1), (0, 2, 777.1), (0, 4, 777.1), (0, 6, 777.1), (0, 8, 777.1),
               (0, 10, 777.1), (2, -10, 777.1), (2, -8, 777.1), (2, -6, 777.1), (2, -4, 777.1), (2, -2, 777.1),
               (2, 0, 777.1), (2, 2, 777.1), (2, 4, 777.1), (2, 6, 777.1), (2, 8, 777.1), (2, 10, 777.1),
               (4, -10, 777.1), (4, -8, 777.1), (4, -6, 777.1), (4, -4, 777.1), (4, -2, 777.1), (4, 0, 777.1),
               (4, 2, 777.1), (4, 4, 777.1), (4, 6, 777.1), (4, 8, 777.1), (4, 10, 777.1), (6, -10, 777.1),
               (6, -8, 777.1), (6, -6, 777.1), (6, -4, 777.1), (6, -2, 777.1), (6, 0, 777.1), (6, 2, 777.1),
               (6, 4, 777.1), (6, 6, 777.1), (6, 8, 777.1), (6, 10, 777.1), (8, -10, 777.1), (8, -8, 777.1),
               (8, -6, 777.1), (8, -4, 777.1), (8, -2, 777.1), (8, 0, 777.1), (8, 2, 777.1), (8, 4, 777.1),
               (8, 6, 777.1), (8, 8, 777.1), (8, 10, 777.1), (10, -10, 777.1), (10, -8, 777.1), (10, -6, 777.1),
               (10, -4, 777.1), (10, -2, 777.1), (10, 0, 777.1), (10, 2, 777.1), (10, 4, 777.1), (10, 6, 777.1),
               (10, 8, 777.1), (10, 10, 777.1)]

    results1 = [(10, 10, 112.9), (10, 8, 137.5), (10, 6, 172.6), (10, 4, 209.1), (10, 2, 235.9), (10, 0, 245.7), (10, -2, 245.7), (10, -4, 245.7), (10, -6, 245.7), (10, -8, 245.7), (10, -10, 245.7), (8, 10, 245.7), (8, 8, 245.7), (8, 6, 245.8), (8, 4, 302.0), (8, 2, 341.6), (8, 0, 355.9), (8, -2, 355.9), (8, -4, 355.9), (8, -6, 355.9), (8, -8, 355.9), (8, -10, 355.9), (6, 10, 355.9), (6, 8, 355.9), (6, 6, 355.9), (6, 4, 403.5), (6, 2, 456.1), (6, 0, 474.7), (6, -2, 474.7), (6, -4, 474.7), (6, -6, 474.7), (6, -8, 474.7), (6, -10, 474.7), (4, 10, 474.7), (4, 8, 474.7), (4, 6, 474.7), (4, 4, 495.7), (4, 2, 561.8), (4, 0, 586.2), (4, -2, 586.2), (4, -4, 586.2), (4, -6, 586.2), (4, -8, 586.2), (4, -10, 586.2), (2, 10, 586.2), (2, 8, 586.2), (2, 6, 586.2), (2, 4, 586.2), (2, 2, 643.9), (2, 0, 776.8), (2, -2, 776.8), (2, -4, 776.8), (2, -6, 776.8), (2, -8, 776.8), (2, -10, 776.8), (0, 10, 776.8), (0, 8, 776.8), (0, 6, 776.8), (0, 4, 776.8), (0, 2, 776.8), (0, 0, 777.1), (0, -2, 777.1), (0, -4, 777.1), (0, -6, 777.1), (0, -8, 777.1), (0, -10, 777.1), (-2, 10, 777.1), (-2, 8, 777.1), (-2, 6, 777.1), (-2, 4, 777.1), (-2, 2, 777.1), (-2, 0, 777.1), (-2, -2, 777.1), (-2, -4, 777.1), (-2, -6, 777.1), (-2, -8, 777.1), (-2, -10, 777.1), (-4, 10, 777.1), (-4, 8, 777.1), (-4, 6, 777.1), (-4, 4, 777.1), (-4, 2, 777.1), (-4, 0, 777.1), (-4, -2, 777.1), (-4, -4, 777.1), (-4, -6, 777.1), (-4, -8, 777.1), (-4, -10, 777.1), (-6, 10, 777.1), (-6, 8, 777.1), (-6, 6, 777.1), (-6, 4, 777.1), (-6, 2, 777.1), (-6, 0, 777.1), (-6, -2, 777.1), (-6, -4, 777.1), (-6, -6, 777.1), (-6, -8, 777.1), (-6, -10, 777.1), (-8, 10, 777.1), (-8, 8, 777.1), (-8, 6, 777.1), (-8, 4, 777.1), (-8, 2, 777.1), (-8, 0, 777.1), (-8, -2, 777.1), (-8, -4, 777.1), (-8, -6, 777.1), (-8, -8, 777.1), (-8, -10, 777.1), (-10, 10, 777.1), (-10, 8, 777.1), (-10, 6, 777.1), (-10, 4, 777.1), (-10, 2, 777.1), (-10, 0, 777.1), (-10, -2, 777.1), (-10, -4, 777.1), (-10, -6, 777.1), (-10, -8, 777.1), (-10, -10, 777.1)]

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    for rs in (results, results1):
        x, y, z = zip(*rs)
        dim_x = list(x).count(x[0])
        dim_y = list(y).count(y[0])
        X = []
        Y = []
        Z = []

        for i in range(dim_y):
            X.append(list(x[i*dim_x:(i+1)*dim_x]))
        for i in range(dim_y):
            Y.append(list(y[i*dim_x:(i+1)*dim_x]))
        [Z.append(list(z)[i*dim_x:(i+1)*dim_x]) for i in range(dim_y)]

        ax.scatter(np.array(X), np.array(Y), np.array(Z), cmap=cm.coolwarm,
                           linewidth=0, antialiased=False)

    xAxisLine = ((min(x), max(x)), (0, 0), (max(z), max(z)))
    ax.plot(xAxisLine[0], xAxisLine[1], xAxisLine[2], 'black')
    yAxisLine = ((0, 0), (min(y), max(y)), (max(z), max(z)))
    ax.plot(yAxisLine[0], yAxisLine[1], yAxisLine[2], 'black')

    ax.set_xlabel("X - fire")
    ax.set_ylabel("Y - fire")
    ax.set_zlabel("max temperature")
    ax.set_title("maximum temperature while fire axes are changing")

    plt.show()


if __name__ == '__main__':

    rob()
